@model CB.BACKOFICEOFICIAL.Models.MNotificacion
@{
    var tipo = (List<KeyValuePair<int, string>>)ViewBag.Tipo;
}
@using (Ajax.BeginForm("AddAcition", "Home", null, new AjaxOptions()
{
    HttpMethod = "POST",
    OnSuccess = "SuccessEdit",
    OnFailure = "FailEdit",
    OnBegin = "return Validation();"
}))
{
   if (Model != null)
    {
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Nuevo Email</h3>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>

                    </div>
                    <!-- /.box-header -->
                    <div class="box-body">
                        <div class="form-group" style="display:none">
                            @Html.LabelFor(model => model.CodCliente, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.CodCliente, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Tipo, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("Tipo", new SelectList(tipo.ToList(), "Key", "Value"), "---Select List---", new { @class = "form-control", @style = "padding-top: 3px; padding-bottom: 3px;" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Massage, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.Massage, new { htmlAttributes = new { @class = "form-control", @sytle = "height: 200px" } })

                            </div>
                        </div>
                        
                    </div>
                    <!-- /.box-body -->
                    <div class="box-footer">
                        <div class="pull-right">
                            <button type="submit" class="btn btn-primary"><i class="fa fa-envelope-o"></i> Guardar</button>
                        </div>
                        <button type="reset" class="btn btn-default" data-dismiss="modal"><i class="fa fa-times"></i> Descartar</button>
                    </div>
                    <!-- /.box-footer -->
                </div>
                <!-- /. box -->

            </div>
            <!-- /.modal-content -->
        </div>
    }
}

<script>
    $(function () {
        //Enable iCheck plugin for checkboxes
        //iCheck for checkbox and radio inputs
        $('.mailbox-messages input[type="checkbox"]').iCheck({
            checkboxClass: 'icheckbox_flat-blue',
            radioClass: 'iradio_flat-blue'
        });

        //Enable check and uncheck all functionality
        $(".checkbox-toggle").click(function () {
            var clicks = $(this).data('clicks');
            if (clicks) {
                //Uncheck all checkboxes
                $(".mailbox-messages input[type='checkbox']").iCheck("uncheck");
                $(".fa", this).removeClass("fa-check-square-o").addClass('fa-square-o');
            } else {
                //Check all checkboxes
                $(".mailbox-messages input[type='checkbox']").iCheck("check");
                $(".fa", this).removeClass("fa-square-o").addClass('fa-check-square-o');
            }
            $(this).data("clicks", !clicks);
        });

        //Handle starring for glyphicon and font awesome
        $(".mailbox-star").click(function (e) {
            e.preventDefault();
            //detect type
            var $this = $(this).find("a > i");
            var glyph = $this.hasClass("glyphicon");
            var fa = $this.hasClass("fa");

            //Switch states
            if (glyph) {
                $this.toggleClass("glyphicon-star");
                $this.toggleClass("glyphicon-star-empty");
            }

            if (fa) {
                $this.toggleClass("fa-star");
                $this.toggleClass("fa-star-o");
            }
        });
    });

    function SuccessEdit(e) {
        if (e[0].Key == "OK") {
            success(e[0].Value);
            ListarDetalle();
            $('#emailmodal').modal('hide');
            success(e[0].Value);
        } else {
            error(e[0].Value);
        }
    }
    function FailEdit(e) {

    }
    function Validation() {
        return true;
    }

</script>
